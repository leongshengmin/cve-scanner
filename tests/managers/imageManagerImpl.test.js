const imageManager = require("../../managers/imageManagerImpl");
const imageDao = require('../../daos/imageDao');
const dockerService = require('../../services/dockerService');
const dbConnectorSvc = require('../../services/dbConnectorService');
const axios = require('axios');

const sinon = require('sinon');

afterEach(() => dbConnectorSvc.destroy());

describe("createImage()", () => {

  it("happy path", () => {

    sinon.stub(dockerService, 'login').callsFake(() => Promise.resolve());
    sinon.stub(dockerService, 'buildAndPush').callsFake(() => Promise.resolve());

    const loginSpy = jest.spyOn(dockerService, 'login');
    const buildAndPushSpy = jest.spyOn(dockerService, 'buildAndPush');

    const imageRepoUri = "cs3219sm";
    const sourceCodeUri = "git@github.com:leongshengmin/cve-scanner.git";
    const imageTag = "testtag";
    const uname = "uname";
    const password = "pass";

    imageManager.createImage(
      imageRepoUri, sourceCodeUri, imageTag, uname, password
    ).then(res => {
      const imagePath = `${imageRepoUri}/cve-scanner.git:${imageTag}`;
      expect(loginSpy).toBeCalledWith(uname, password);
      expect(buildAndPushSpy).toBeCalledWith(imagePath, sourceCodeUri)

      expect(res).toBe(imagePath);
    });

  });
});

describe("getImageCves()", () => {

  it("happy path", () => {

    sinon.stub(imageDao, 'getImageByName').callsFake(() => {
      let row = {};
      row[imageDao.CHILD_BLOB_SUM_FIELD] = "layerblobsum";
      return Promise.resolve([row]);
    });

    sinon.stub(axios, 'get').callsFake(() => Promise.resolve({ "data": []}));

    const imageDaoSpy = jest.spyOn(imageDao, 'getImageByName');
    const axiosSpy = jest.spyOn(axios, 'get');

    const imageName = "imageName";

    imageManager.getImageCves(
      imageName
    ).then(() => {
      expect(imageDaoSpy).toBeCalledWith(imageName);
      expect(axiosSpy).toBeCalledWith(`http://localhost:6060/v1/layers/layerblobsum?features&vulnerabilities`);
    });

  });
});

describe("processImageForCves()", () => {

  it("happy path", () => {

    sinon.stub(axios, 'get').callsFake(() => {
      let respObj = {
        "data": {
          "token": "dockerAuthToken",
          "fsLayers": [
            {"blobSum": "blobSum"}
          ]
        }
      };
      return Promise.resolve(respObj)
    });

    sinon.stub(axios, 'post').callsFake(() => Promise.resolve());

    sinon.stub(imageDao, 'createImage').callsFake(() => Promise.resolve());

    const imageRepoUri = "cs3219sm";
    const imageName = "cve-scanner.git";
    const imageTag = "testtag";
    const bearerToken = "Bearer token";
    const uname = "uname";
    const password = "pass";

    const axiosSpy = jest.spyOn(axios, 'get');

    imageManager.processImageForCves(
      imageRepoUri, imageName, imageTag, bearerToken, uname, password
    );
    expect(axiosSpy).toBeCalled();

  });
});

describe("deleteImage()", () => {

  it("happy path", () => {

    sinon.stub(imageDao, 'getImageByName').callsFake(() => Promise.resolve());
    sinon.stub(imageDao, 'softDeleteImage').callsFake(() => Promise.resolve(1));

    const imageDaoGetSpy = jest.spyOn(imageDao, 'getImageByName');
    const imageDaoDeleteSpy = jest.spyOn(imageDao, 'softDeleteImage');

    const imageName = "imageName";
    imageManager.deleteImage(
      imageName
    ).then(() => {
      expect(imageDaoGetSpy).toBeCalledWith(imageName);
      expect(imageDaoDeleteSpy).toBeCalledWith(imageName);
    });

  });
});
