const crypto = require('crypto');
const imageManager = require('../managers/imageManagerImpl');

/**
 * Retrieves all CVEs for this image.
 *
 * @param req request containing {@code imageName} field
 */
function getImageCves(req, res) {
  const imageName = req.body.imageName;

  if (!imageName) {
    return res.send({
      message: 'Invalid image name',
      status: 400
    });
  }

  console.log('image manager to get cves');
  return imageManager.getImageCves(imageName)
    .then(cves => res.send({ status: 200, data: cves }))
    .catch(err => {
      console.error(err);
      return res.send({
        message: 'Unable to get image CVEs',
        status: 500,
      })
    });
}

/**
 * Builds and pushes a docker image tagged with {@code imageTag}
 * using the given {@code sourceCodeRepoUri} as context to the {@code imageRepoUri}.
 *
 * @param req contains the required fields {@code imageRepoUri, sourceCodeRepoUri, imageTag} in the payload.
 * Note that {@code sourceCodeRepoUri} must contain a Dockerfile in the root directory.
 *
 * {@code auth} protected endpoint. (Requires imageRepo basic authentication in the header's request)
 */
function createImage(req, res) {
  let {imageRepoUri, sourceCodeRepoUri, imageTag} = req.body;
  imageTag = imageTag || crypto.randomBytes(8).toString("hex");
  if (!sourceCodeRepoUri || !imageRepoUri) {
    return res.send({
      status: 400,
      message: 'No URI supplied!'
    });
  }

  if (!req.headers.authorization) {
    return res.send({
      status: 403,
      message: 'No auth header sent with request!'
    })
  }

  const { username, password } = getBasicAuth(req.headers.authorization);

  console.log('image manager to create image');
  return imageManager.createImage(imageRepoUri, sourceCodeRepoUri, imageTag, username, password)
    .then(imagePath => res.send({ status: 201, data: { imagePath: imagePath } }))
    .catch(err =>
      res.send({
        status: 500,
        message: err,
      }));
}

/**
 * Pulls the image from {@code imageRepoUri} and submits a scan job to clair.
 *
 * @param req contains required payload fields {@code imageRepoUri, imageName, imageTag}
 *
 * {@code auth} protected endpoint. (Requires imageRepo basic authentication in the header's request)
 */
function processImageForCves(req, res) {
  const {imageRepoUri, imageName, imageTag} = req.body;

  if (!imageName || !imageTag) {
    return res.send({
      message: 'Invalid image name or tag',
      status: 400
    });
  }

  const bearerToken = req.headers.authorization;
  if (!bearerToken) {
    return res.send({
      status: 403,
      message: 'No auth header sent with request!'
    })
  }

  const {username, password} = getBasicAuth(bearerToken);

  console.log('image manager to process image');
  imageManager.processImageForCves(imageRepoUri, imageName, imageTag, bearerToken, username, password);

  return res.sendStatus(200);
}

/**
 * Soft deletes an image from the database given {@code imageName}.
 *
 * @param req contains required payload {@code imageName}
 */
function deleteImage(req, res) {
  const imageName = req.body.imageName;
  if (!imageName) {
    return res.send({
      status: 400,
      message: 'No image name supplied!'
    });
  }

  imageManager.deleteImage(imageName);
  return res.sendStatus(202);
}

/**
 * Helper function to retrieve basic auth from the authentication headers.
 * @param authHeaders
 * @returns {{password: *, username: *}}
 */
function getBasicAuth(authHeaders) {
  console.log('getting basic auth from header ', authHeaders);
  const base64Credentials = authHeaders.split(' ')[1];
  const credentials = Buffer.from(base64Credentials, 'base64').toString('ascii');
  const [username, password] = credentials.split(':');

  return { username: username, password: password };
}

module.exports = {
  getImageCves: getImageCves, // GET
  createImage: createImage, // POST
  processImageForCves: processImageForCves, // PUT
  deleteImage: deleteImage, // DELETE
}